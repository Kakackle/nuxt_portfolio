[
    {
        "id": "Kalopsia",
        "title":"Kalopsia / E-commerce / Two frameworks on one domain",
        "main_features":[
           {
              "img":"Sklep/Home.PNG",
              "desc":"Front-facing home view with product previews, a dynamic banner, a 3D model viewer and a functional newsletter sign-up form"
           },
           {
              "img": "Sklep/page1.PNG",
              "desc": "Main store grid, with filtering and sorting options based on categories and object properties, paginated, with links to add to card or to favourites"
           },
           {
              "img":"Sklep/page2.PNG",
              "desc":"Product view with a photo wheel, a magnifier, product detail tabs, a review section and ordering options"
           },
           {
              "img":"Sklep/page3.PNG",
              "desc":"Cart view easily convertible into orders with saved addresses, discounts codes, shipping options"
           }
        ],
        "desc": "The project serves as an example of a fledged out fullstack application utilizing a backend (Django) and a frontend (Vue) framework, including complex model relations, using a Postgresql database, capable of utilizing external services such as Stripe or SendGrid. Also utilizing full capacities of a Django-based application with session based auth, a built-in account system, database model-based forms etc, while being able to work with a dynamic frontend framework like Vue, speeding up front-end developemnt and allowing for the use of the component and reference system features."
     },
     {
        "id": "Blog",
        "title":"Blog App / Separate frontend and backend",
        "main_features":[
           {
              "img":"Blog/Home.PNG",
              "desc":"Paginated posts view with sorting and filtering by multiple data-based metrics, including likes, by followed users, date"
           },
           {
              "img":"Blog/Post.PNG",
              "desc":"Post view with markdown-based display, a comments section, in-post images, links to tag definitions etc"
           },
           {
            "img":"Blog/post_create_cut.PNG",
            "desc":"Post creation with a custom markdown editor and post preview, including multiple images uploading"
            },
           {
              "img":"Blog/api.PNG",
              "desc":"API-based backend with an openapi schema (mostly) conforming to REST rules"
           }
        ],
        "desc": "The app is a combination of a separate frontend built in Vue and a REST-style API backend built in Django. Allows for user creation, user following, post creation, editing and liking, commenting on posts and all related CRUD operations, whilst offering a slick, modern SPA-based interface, providing a separation of concerns for ease of development"
     },
    {
       "id": "Insta",
       "title":"Insta / Django Instagram clone (with HTMX)",
       "main_features":[
          {
             "img":"Insta/Home.PNG",
             "desc":"Infinite scroll-based page with posts with comments section previews, post liking and filtering by followed users"
          },
          {
             "img":"Insta/Grid.PNG",
             "desc":"Post grid filterable by tags, description, followed users, liekd posts and more"
          },
          {
             "img":"Insta/signup_form.PNG",
             "desc":"Utilization of built-in Django features such as session-based authentication, database models forms and validation"
          }
       ],
       "desc": "A Django-based fullstack application based on accounts and model relations, utilizing model forms, authentication, filtering backends etc, to showcase Django as a fully capable fullstack framework, with the additonal usage of HTMX to enable form submission that refreshes only a part of a website with the newest database state for a smoother user experience"
    },
    {
      "id": "React",
        "title":"Rate Your Stuff / React social app",
        "main_features":[
           {
              "img":"RYS/rys_1.png",
              "desc":"Main page"
           },
           {
              "img":"RYS/rys_2.png",
              "desc":"Post page with comments/reviews"
           },
           {
              "img":"RYS/rys_3.png",
              "desc":"Supabase schema"
           }
        ],
        "desc": ""
     },
    {
        "id": "Forum",
        "title":"A Django Forum app with a modern development workflow",
        "main_features":[
           {
              "img":"Forum/Topic.PNG",
              "desc":"An account-based forum website with posts within topics within threads"
           },
           {
              "img":"Forum/markdown.PNG",
              "desc":"Topic-reply based, with user reputation and a built-in markdown editor"
           },
           {
              "img":"Forum/github_actions.PNG",
              "desc":"Implementation of Github actions, a test coverage, dockerizing"
           }
        ],
        "desc": "The project in it's simplicity allows for easy implementation and testing of various modern development techniques such as composing the website service with a Postgresql database service, utilizing various testing techniques such as Pytest, styling with Flake8 and others"
     }
]